/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.example.streaming.demo.avro;
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ot1 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ot1\",\"namespace\":\"com.example.streaming.demo.avro\",\"fields\":[{\"name\":\"table\",\"type\":\"string\"},{\"name\":\"op_type\",\"type\":\"string\"},{\"name\":\"before\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"columns\",\"fields\":[{\"name\":\"nick\",\"type\":[\"string\",\"null\"],\"default\":null},{\"name\":\"grade\",\"type\":[\"int\",\"null\"],\"default\":null},{\"name\":\"uid\",\"type\":[\"string\",\"null\"],\"default\":null}]}],\"default\":null},{\"name\":\"after\",\"type\":[\"null\",\"columns\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence table;
  @Deprecated public java.lang.CharSequence op_type;
  @Deprecated public com.example.streaming.demo.avro.columns before;
  @Deprecated public com.example.streaming.demo.avro.columns after;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public ot1() {}

  /**
   * All-args constructor.
   */
  public ot1(java.lang.CharSequence table, java.lang.CharSequence op_type, com.example.streaming.demo.avro.columns before, com.example.streaming.demo.avro.columns after) {
    this.table = table;
    this.op_type = op_type;
    this.before = before;
    this.after = after;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return table;
    case 1: return op_type;
    case 2: return before;
    case 3: return after;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: table = (java.lang.CharSequence)value$; break;
    case 1: op_type = (java.lang.CharSequence)value$; break;
    case 2: before = (com.example.streaming.demo.avro.columns)value$; break;
    case 3: after = (com.example.streaming.demo.avro.columns)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'table' field.
   */
  public java.lang.CharSequence getTable() {
    return table;
  }

  /**
   * Sets the value of the 'table' field.
   * @param value the value to set.
   */
  public void setTable(java.lang.CharSequence value) {
    this.table = value;
  }

  /**
   * Gets the value of the 'op_type' field.
   */
  public java.lang.CharSequence getOpType() {
    return op_type;
  }

  /**
   * Sets the value of the 'op_type' field.
   * @param value the value to set.
   */
  public void setOpType(java.lang.CharSequence value) {
    this.op_type = value;
  }

  /**
   * Gets the value of the 'before' field.
   */
  public com.example.streaming.demo.avro.columns getBefore() {
    return before;
  }

  /**
   * Sets the value of the 'before' field.
   * @param value the value to set.
   */
  public void setBefore(com.example.streaming.demo.avro.columns value) {
    this.before = value;
  }

  /**
   * Gets the value of the 'after' field.
   */
  public com.example.streaming.demo.avro.columns getAfter() {
    return after;
  }

  /**
   * Sets the value of the 'after' field.
   * @param value the value to set.
   */
  public void setAfter(com.example.streaming.demo.avro.columns value) {
    this.after = value;
  }

  /** Creates a new ot1 RecordBuilder */
  public static com.example.streaming.demo.avro.ot1.Builder newBuilder() {
    return new com.example.streaming.demo.avro.ot1.Builder();
  }
  
  /** Creates a new ot1 RecordBuilder by copying an existing Builder */
  public static com.example.streaming.demo.avro.ot1.Builder newBuilder(com.example.streaming.demo.avro.ot1.Builder other) {
    return new com.example.streaming.demo.avro.ot1.Builder(other);
  }
  
  /** Creates a new ot1 RecordBuilder by copying an existing ot1 instance */
  public static com.example.streaming.demo.avro.ot1.Builder newBuilder(com.example.streaming.demo.avro.ot1 other) {
    return new com.example.streaming.demo.avro.ot1.Builder(other);
  }
  
  /**
   * RecordBuilder for ot1 instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ot1>
    implements org.apache.avro.data.RecordBuilder<ot1> {

    private java.lang.CharSequence table;
    private java.lang.CharSequence op_type;
    private com.example.streaming.demo.avro.columns before;
    private com.example.streaming.demo.avro.columns after;

    /** Creates a new Builder */
    private Builder() {
      super(com.example.streaming.demo.avro.ot1.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.example.streaming.demo.avro.ot1.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.table)) {
        this.table = data().deepCopy(fields()[0].schema(), other.table);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.op_type)) {
        this.op_type = data().deepCopy(fields()[1].schema(), other.op_type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.before)) {
        this.before = data().deepCopy(fields()[2].schema(), other.before);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.after)) {
        this.after = data().deepCopy(fields()[3].schema(), other.after);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing ot1 instance */
    private Builder(com.example.streaming.demo.avro.ot1 other) {
            super(com.example.streaming.demo.avro.ot1.SCHEMA$);
      if (isValidValue(fields()[0], other.table)) {
        this.table = data().deepCopy(fields()[0].schema(), other.table);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.op_type)) {
        this.op_type = data().deepCopy(fields()[1].schema(), other.op_type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.before)) {
        this.before = data().deepCopy(fields()[2].schema(), other.before);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.after)) {
        this.after = data().deepCopy(fields()[3].schema(), other.after);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'table' field */
    public java.lang.CharSequence getTable() {
      return table;
    }
    
    /** Sets the value of the 'table' field */
    public com.example.streaming.demo.avro.ot1.Builder setTable(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.table = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'table' field has been set */
    public boolean hasTable() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'table' field */
    public com.example.streaming.demo.avro.ot1.Builder clearTable() {
      table = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'op_type' field */
    public java.lang.CharSequence getOpType() {
      return op_type;
    }
    
    /** Sets the value of the 'op_type' field */
    public com.example.streaming.demo.avro.ot1.Builder setOpType(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.op_type = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'op_type' field has been set */
    public boolean hasOpType() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'op_type' field */
    public com.example.streaming.demo.avro.ot1.Builder clearOpType() {
      op_type = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'before' field */
    public com.example.streaming.demo.avro.columns getBefore() {
      return before;
    }
    
    /** Sets the value of the 'before' field */
    public com.example.streaming.demo.avro.ot1.Builder setBefore(com.example.streaming.demo.avro.columns value) {
      validate(fields()[2], value);
      this.before = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'before' field has been set */
    public boolean hasBefore() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'before' field */
    public com.example.streaming.demo.avro.ot1.Builder clearBefore() {
      before = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'after' field */
    public com.example.streaming.demo.avro.columns getAfter() {
      return after;
    }
    
    /** Sets the value of the 'after' field */
    public com.example.streaming.demo.avro.ot1.Builder setAfter(com.example.streaming.demo.avro.columns value) {
      validate(fields()[3], value);
      this.after = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'after' field has been set */
    public boolean hasAfter() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'after' field */
    public com.example.streaming.demo.avro.ot1.Builder clearAfter() {
      after = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public ot1 build() {
      try {
        ot1 record = new ot1();
        record.table = fieldSetFlags()[0] ? this.table : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.op_type = fieldSetFlags()[1] ? this.op_type : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.before = fieldSetFlags()[2] ? this.before : (com.example.streaming.demo.avro.columns) defaultValue(fields()[2]);
        record.after = fieldSetFlags()[3] ? this.after : (com.example.streaming.demo.avro.columns) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
